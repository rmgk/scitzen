:root {
	--theme-color: #9C27B0FF;
	--light-theme-color: #9C27B066;
	--color-subdued: GrayText;

	--theme-border-radius: 5px;
	--theme-border: 1px solid var(--theme-color);

	--theme-plate-color: hsla(0, 0%, 50%, 0.1);

	/* a4 paper has 21cm, subtract 1.5 inch for print margins gives 171.9mm */
	--main-content-width: 17cm;
	--header-oversize: 5cm;
	--sidebar-max-width: 20em;

	--small-gap: 0.5em;
	--normal-gap: 1em;

	--color-marker-red: #E91E63;
	--color-marker-green: #60C689;

	/* allow browser to select a color scheme based on user preferences */
	color-scheme: light dark;
}

body {
	/* margins are handled for main and sidebar individually */
	margin: 0;
	/* that should be 18px for the default of 16px font, but scale with user defined font size */
	font-size: 1.125rem;
}

/* enable hyphenation everywhere */
/* this is required for the main text as that has justified content, */
/* but the navigation also profits from better use of space */
html {
	hyphens: auto;
}


/**************************************************************/
/* main grid layout                                           */
/**************************************************************/

main {
	/* this may be necessary for compatibility in some browsers */
	display: block;
}

@media screen {
	main {
		/* allow overscrolling past the end of the content */
		margin-bottom: calc(100vh - 4em);

		/* use grid to have text centered, but allow oversized image content */
		display: grid;
		/* the minmax(0, 1fr) ensures that the margins are never larger than 1fr,
		   but can shrink arbitrarily. Plain 1fr is equal to minmax(auto, 1fr)
		   causing the thing to widen in case the content is large,
		   as could happen with some images.
		   the content has a fixed minimum width to force a scrollbar on the content at some point
		   note that everything breaks if --main-content-width is smaller than the minimum here,
		   which is why the minimum is not min-content */
		grid-template-columns:
			[image-start]   minmax(var(--normal-gap), 2fr)
			[header-start]  minmax(0, 1fr)
			[content-start] minmax(0, var(--main-content-width))
			[content-end]   minmax(0, 1fr)
			[header-end]    minmax(var(--normal-gap), 2fr)
			[image-end];

		grid-row-gap: var(--small-gap);
	}

	/* usually margins should collapse, but because of grid they dont. */
	/* thus we replace margins by grid gaps */
	main > * {
		margin: 0;
		grid-column: content-start / content-end;
	}

	/* oversized elements */
	main > :is(img, figure, video, pre) {
		/* oversized figures and images */
		grid-column: image-start / image-end;

		/* justify instead of margins to center elements in grid */
		/* unsafe keeps centered even if that causes overflow into left and right elements */
		/* safe aligns left in case of overflow (moving overflow to the right) */
		justify-self: safe center;
	}
}

/* use a simplified print sheet where all content is just centered */
@media print {
	body {
		font-size: 11pt;
	}

	main > * {
		margin-left: auto;
		margin-right: auto;
		max-width: var(--main-content-width) !important;
		display: block;
	}

	.marginnote {
		display: none;
	}
}

/******************************************************************************/
/* general styling of elements follow, these should not affect overall layout */
/******************************************************************************/

h1, h2, h3, h4, h5, h6, hr {
	/* we disabled all margins because they do not fold in grids */
	/* for headers, we add padding instead, which works nicer with jumping to IDs */
	padding-top: 1rem;
	margin-bottom: 0.5rem;
}

h1, h2, hr {
	/* hr is basically a header without text */
	border: none;

	text-align: center;
	/* safe aligns left in case of overflow */
	justify-self: safe center;

	border-bottom: var(--theme-border);
	/* limit the width to either the grid element (scaling down for smaller screens) */
	/* or to something a bit larger than the main content (limiting oversize for large screens) */
	grid-column: header-start / header-end;
	width: min(100%, calc(var(--main-content-width) + var(--header-oversize)));
}

h4 {
	font-style: italic;
}

/* headers counting */
.numbered-sections main {
	counter-reset: section;
}

.numbered-sections h2 {
	counter-increment: section;
	counter-reset: subsection;
}

.numbered-sections h3 {
	counter-increment: subsection;
}

.numbered-sections h2:before {
	content: counter(section) ". ";
}

.numbered-sections h3:before {
	content: counter(section) "." counter(subsection) ". ";
}

svg.icon {
	vertical-align: bottom;
	width: 0.85em;
	height: 0.85em;
	padding-bottom: 0.15em;
}


.metadata {
	display: flex;
	flex-direction: column;
	align-items: center;
	word-wrap: anywhere;
}


time, .tags, .metadata {
	color: var(--color-subdued);
}

time {
	white-space: pre;
	/* double monospace to override firefox default font size to use same as other fonts */
	font-family: monospace, monospace;
}

/* basic text styling */

main :is(p, ol, ul, dl, figcaption) {
	/* set line-height to scaled pixels */
	line-height: calc(28 / 18);
	/* text based things always are limited to content width, */
	/* even when nested inside something else */
	max-width: var(--main-content-width);
}

main.hardwrap :is(p, ol, ul, dl, figcaption) {
	/* display linebreaks */
	white-space: pre-line;
}

main:not(.no-justify) :is(p, ol, ul, dl, figcaption) {
	text-align: justify;
}

a {
	text-decoration: none;
	color: var(--theme-color);
}

a:hover {
	filter: brightness(75%);
}

/* containers of other elements */

figure, blockquote, pre {
	background-color: var(--theme-plate-color);
	border-radius: var(--theme-border-radius);
	padding: var(--normal-gap);
}

/* remove top&bottom margins of nested elements */
:is(figure, blockquote, pre, dd) > :first-child {
	margin-top: 0;
}

:is(figure, blockquote, pre, dd) > :last-child {
	margin-bottom: 0;
}

/* add margin to inner elements */
:is(figure, blockquote, pre, dd) > :not(:first-child) {
	margin-top: 0.5em;
}

/* code blocks */

pre {
	white-space: pre-wrap;
	tab-size: 4;
	/* we only want code in code font (default is monospace) */
	font-family: inherit;
	/* restrict pre-size to the outer container to make code blocks inside break aggressively */
	max-width: 100%;
	box-sizing: border-box;
}

code {
	hyphens: none;
}

:not(pre) > code {
	background-color: var(--theme-plate-color);
	padding: calc(var(--normal-gap) / 10);
	border-radius: var(--theme-border-radius);
}

pre > code {
	/* this causes the content of the pre (usually the code) to be wrapped to fit small screen widths */
	overflow-wrap: break-word;
}


/* individual element styles */

.marginnote {
	grid-column: content-end / image-end;
	margin-left: 2em;
	overflow: hidden;
	text-align: left;
}

img, video {
	/* why is this not the default? */
	image-orientation: from-image;

	border-radius: var(--theme-border-radius);

	/* display: block; */
	height: auto;
	max-height: 90vh;
	max-width: 100%;
}

:is(img, video).sizing-text {
	max-width: min(100%, var(--main-content-width));
}


/* center contents of a figure, in particular the caption */
figure {
	display: flex;
	flex-direction: column;
	align-items: center;
}

.rule {
	font-variant: small-caps;
}

li > p:only-child {
	margin: 0;
}

dt {
	font-weight: bold;
}

ins {
	text-decoration: none;
	color: var(--color-marker-green);
}

del {
	color: var(--color-marker-red);
}

.bibliography li {
	margin-top: var(--normal-gap);
}

.bibliography p {
	line-height: initial;
	margin: 0;
	margin-top: var(--small-gap);
}

.bibliography .container {
	font-style: italic;
}


/**************************************************************/
/* index page styling */
/**************************************************************/

article {
	display: flex;
}

@media screen and (max-width: 600px) {
	article {
		flex-direction: column;
	}
}

@media screen and (min-width: 600px) {
	article > .tags {
		text-align: right;
	}
}

/* space between the items of the article */
/* while this is part of the html, its eaten by the flex */
article > * {
	margin-right: var(--small-gap);
}

/* make the title get most of the space, */
/* to cause the tags to be right aligned */
article > a {
	flex: 1;
}


/**************************************************************/
/* Sidebar design */
/**************************************************************/
@media screen {
	body {
		display: flex;
	}
}

@media print {
	body > aside {
		display: none;
	}
}

/* body has an optional aside and a main */
/* if the aside exists, it is pinned on the full height, */
/* unless a button is pressed to hide it */

body > main {
	flex: 1 1 var(--main-content-width);
}

body > aside {
	/* no growth beyond content size, shrink aggressively, try to target max-content if there is enough space */
	flex: 0 100 max-content;
	/* max width, because sidebar with very long header names does not look great */
	max-width: var(--sidebar-max-width);
}

body > aside > label {
	position: fixed;
	bottom: 0;
	cursor: pointer;
	/* fixed pixel size to correspond to designed image size of the svg icons */
	width: 24px;
	height: 24px;
	padding: var(--small-gap);
	z-index: 1;
}

/* the label is marked as hidden in the HTML, */
/* because it makes no sense to show it if the stylesheet is not present */
/* we use this high specificity selector to override the hidden attribute */
body > aside > label[hidden] {
	display: initial;
}

body > aside > label > svg {
	width: 100%;
	height: 100%;
}

body > aside > nav {
	/* sticky at top 0 (original position of the element) essentially causes the */
	/* element to be fixed in place BUT it keeps occupying space in the layout */
	position: sticky;
	top: 0;

	/* box sizing together with height makes it occupy the full height pixel perfect */
	/* except for some broken mobile environments like the android web view */
	box-sizing: border-box;
	height: 100vh;


	/* always show scrollbar to reserve space */
	overflow-y: scroll;
	scrollbar-width: thin;
	scrollbar-color: var(--light-theme-color) hsla(0, 0%, 0%, 0);

	/* make things also not hug the screen */
	padding-left: var(--small-gap);
	padding-top: var(--small-gap);
	/* for the srcoll bar; firefox desktop does assign space for the scrollbar by itself, but mobile browsers often do not */
	padding-right: var(--small-gap);
	/* space for the bottom label */
	padding-bottom: calc(var(--normal-gap) + 24px);

	border-right: var(--theme-border);
}

body > aside > nav ol {
	list-style: disc;
	margin: 0;
	margin-left: var(--normal-gap);
	padding: 0;
}

body > aside > nav li {
	margin-top: var(--small-gap);
}

/* sidebar counters */
body.numbered-sections > aside > nav ol {
	counter-reset: item;
	list-style: none;
}

body.numbered-sections > aside > nav li:before {
	content: counters(item, ".") " ";
	counter-increment: item;
}


/* remove sidebar nav content depending on screen size and clicked status … */
#sidebar-switch:checked ~ nav {
	display: none;
}

#sidebar-switch ~ label .close {
	display: block;
}

#sidebar-switch ~ label .menu {
	display: none;
}

#sidebar-switch:checked ~ label .close {
	display: none;
}

#sidebar-switch:checked ~ label .menu {
	display: block;
}

/* inverted logic for small screens */
@media (max-width: 600px) {
	#sidebar-switch ~ nav {
		display: none;
	}

	#sidebar-switch:checked ~ nav {
		display: block;
	}

	#sidebar-switch ~ label .close {
		display: none;
	}

	#sidebar-switch ~ label .menu {
		display: block;
	}

	#sidebar-switch:checked ~ label .close {
		display: block;
	}

	#sidebar-switch:checked ~ label .menu {
		display: none;
	}
}

/**************************************************************/
/* external and technical stuff */
/**************************************************************/

/* highlight targets are for forward sync when writing text */
#highlight:target + * {
	background: yellow;
}

#highlight {
	border-top: 30vh transparent solid;
	margin-top: -30vh;
}


@keyframes fade-target {
	0%, 30% {
		background: var(--light-theme-color)
	}
}

*:target {
	animation: 1s ease 0s 1 fade-target;
}


/* PrismJS syntax styles adapted from the following:
 * PrismJS 1.26.0 https://prismjs.com/
 * Based on dabblet (http://dabblet.com)
 * @author Lea Verou
 * okaidia theme for JavaScript, CSS and HTML
 * Loosely based on Monokai textmate theme by http://www.monokai.nl/
 * @author ocodia
 */

.token.important,
.token.bold {
	font-weight: bold;
}

.token.italic {
	font-style: italic;
}

.token.entity {
	cursor: help;
}

@media (prefers-color-scheme: light) {


	.token.comment,
	.token.prolog,
	.token.doctype,
	.token.cdata {
		color: slategray;
	}

	.token.punctuation {
		color: #999;
	}

	.token.namespace {
		opacity: .7;
	}

	.token.property,
	.token.tag,
	.token.boolean,
	.token.number,
	.token.constant,
	.token.symbol,
	.token.deleted {
		color: #905;
	}

	.token.selector,
	.token.attr-name,
	.token.string,
	.token.char,
	.token.builtin,
	.token.inserted {
		color: #690;
	}

	.token.operator,
	.token.entity,
	.token.url,
	.language-css .token.string,
	.style .token.string {
		color: #9a6e3a;
	}

	.token.atrule,
	.token.attr-value,
	.token.keyword {
		color: #07a;
	}

	.token.function,
	.token.class-name {
		color: #DD4A68;
	}

	.token.regex,
	.token.important,
	.token.variable {
		color: #e90;
	}
}

@media (prefers-color-scheme: dark) {

	.token.comment,
	.token.prolog,
	.token.doctype,
	.token.cdata {
		color: #8292a2;
	}

	.token.punctuation {
		color: #f8f8f2;
	}

	.token.namespace {
		opacity: .7;
	}

	.token.property,
	.token.tag,
	.token.constant,
	.token.symbol,
	.token.deleted {
		color: #f92672;
	}

	.token.boolean,
	.token.number {
		color: #ae81ff;
	}

	.token.selector,
	.token.attr-name,
	.token.string,
	.token.char,
	.token.builtin,
	.token.inserted {
		color: #a6e22e;
	}

	.token.operator,
	.token.entity,
	.token.url,
	.language-css .token.string,
	.style .token.string,
	.token.variable {
		color: #f8f8f2;
	}

	.token.atrule,
	.token.attr-value,
	.token.function,
	.token.class-name {
		color: #e6db74;
	}

	.token.keyword {
		color: #66d9ef;
	}

	.token.regex,
	.token.important {
		color: #fd971f;
	}
}
