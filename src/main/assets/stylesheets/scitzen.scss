@import 'lib/normalize.css/normalize';

/*! scitzen.scss */

// define here for media queries, same as css variable below …
$main-content-width: 171.9mm;

:root {
  --theme-color: hsl(0, 50%, 50%);
  --color-subdued: hsl(0, 0%, 66%);
  // a4 paper has 21cm, subtract 1.5 inch for print margins
  --main-content-width: 171.9mm;
}

a {
  text-decoration: none;
  color: var(--theme-color);

  // add a “push down” effect when hovering links
  &:hover {
    transition: 0.2s ease-out;
    transform: translateX(4px);
    filter: brightness(75%);
  }
}

.metadata {
  display: flex;
  // safe causes the metadata to always be visible,
  // even if things become so small that they need to be scrolled
  justify-content: safe center;

  > * {
    margin-right: 0.5em;
  }
}


h1, h2, h3, h4, h5, h6 {
  text-align: center;
}

time, .category {
  @media screen {
    color: var(--color-subdued);
  }
}

time {
  white-space: nowrap;
  // double monospace to override firefox default font size to use same as other fonts
  font-family: monospace, monospace;
  letter-spacing: -0.0625em;
}


@media screen {
  // grid related things in main
  main {
    // use grid to have text centered, but allow oversized image content
    display: grid;
    // the minmax(0, 1fr) ensures that the margins are never larger than 1fr,
    // but can shrink arbitrarily. Plain 1fr is equal to minmax(auto, 1fr)
    // causing the thing to widen in case the content is large,
    // as could happen with some images.
    // the content has a fixed minimum width to force a scrollbar on the content at some point
    // note that everything breaks if --main-content-width is smaller than the minimum here,
    // which is why the minimum is not min-content
    grid-template-columns: [image-start] minmax(0, 1fr) [content-start] minmax(10em, var(--main-content-width)) [content-end] minmax(0, 1fr) [image-end];
  }
}

// usually these should collapse, but because of grid they dont.
h1 + h2 , p + p {
  margin-top: 0;
}

main {
  hyphens: auto;
  // outer edge to keep everything from hugging the screen
  padding: 1em;
  // allow overscrolling past the end of the content
  margin-bottom: calc(100vh - 3.5em);

  line-height: 1.5;
}

main > * {
  grid-column: content-start / content-end;
  // keep all content inside the page
  // this causes per element scrollbars, instead of breaking the full layout
  max-width: 100%;
  overflow-x: auto;
  // firefox seems to have scrollbars when katex
  // elements are at the bottom of paragraphs without this
  overflow-y: hidden;
}


main > figure, main > img {
  // oversized figures and images
  grid-column: image-start / image-end;

  // add borders around figures and pure images
  box-shadow: 0 0 2px rgba(0, 0, 0, .12), 0 0 4px rgba(0, 0, 0, .24);
  background: #fffc;
  border-radius: 5px;

  // justify instead of margins to center elements in grid
  // unsafe causes the image to stay centered even if things get small,
  // causing the box and shadow of the image to hit the border of the window
  justify-self: unsafe center;
  margin-left: 0;
  margin-right: 0;
}


// general styling of elements follow, these should not affect overall layout


p, pre {
  text-align: justify;
  // restrict max width also when nested inside something else
  max-width: var(--main-content-width);
  font-family: inherit;
}

main > figure > pre:has(> code) {
  // undo max width of code pres when top level in figure
  // to profit from oversize figures
  max-width: 100%;
}

pre {
  white-space: pre-line;
}

pre > code {
  white-space: pre;
}

.smallcaps {
  font-variant: small-caps;
}

// quote links and code in paragraphs to clarify their borders
p > a, p > code {
  &:before {
    // ⸢ ⸣ ⸤ ⸥
    content: "⸢";
  }

  &:after {
    content: "⸥";
  }
}

li > p:only-child {
  margin: 0;
}

img {
  // why is this not the default?
  image-orientation: from-image;

  display: block;
  height: auto;
  max-height: 40em;
  margin: auto;
  max-width: 100%;
}


figure, blockquote {
  border: 1px solid var(--color-subdued);
  padding: calc(1em - 1px);
}

figure, blockquote, dd {
  & > :first-child {
    margin-top: 0;
  }

  // center elements inside figure
  & > * {
    margin-left: auto;
    margin-right: auto;
  }

  & > :last-child {
    margin-bottom: 0;
  }
}

cite::before {
  content: "– ";
}

ins {
  text-decoration: none;
  color: darkgreen;
}

del {
  color: darkred;
}


// index page styling


a > article {
  margin: .25em 0;

  display: flex;

  @media screen and (max-width: $main-content-width) {
    flex-direction: column;
  }

  @media screen and (min-width: $main-content-width) {
    & > .category {
      text-align: right;
    }
  }

  // space between the items of the article
  & > * {
    margin-right: 0.5em;
  }

  // make the title get most of the space,
  // to cause the tags to be right aligned
  & > .title {
    flex: 1;
  }
}


// style sidbar list
aside nav ol {
  list-style: disc;
  margin: 0;
  margin-left: 1em;
  padding: 0;
}


// Sidebar design
// body has an optional aside and a main
// if the aside exists, it is pinned on the full height,
// unless a button is pressed to hide it
body {
  @media screen {
    display: flex;
    align-items: stretch;
  }

  & > main {
    flex: 1 1 var(--main-content-width);
  }

  & > aside {
    // the sidebar never shrinks below its minimum content,
    // and tries to grow as soon as possible
    flex: 0 100 max-content;

    // input label pair to allow hiding the sidebar content (nav)
    & > input {
      display: none;
    }

    & > label {
      // the label is marked as hidden in the HTML,
      // because it makes no sense to show it if the stylesheet is not present
      // we use this high specificity selector to override the hidden attribute
      &[hidden] {
        display: initial;
      }

      position: fixed;
      top: 0;
      cursor: pointer;
      width: 1.5em;
      height: 1.5em;
      display: block;
      padding: 0.5em;
      z-index: 1;

      svg {
        width: 100%;
        height: 100%;
      }
    }

    nav {
      // sticky at top 0 (original position of the element) essentially causes the
      // element to be fixed in place BUT it keeps occupying space in the layout
      position: sticky;
      top: 0;

      // show scrollbar
      overflow-y: scroll;

      // box sizing together with height makes it occupy the full height pixel perfect
      box-sizing: border-box;
      height: 100vh;

      // top margin to not collide with the label as much
      padding: 2.5em 0.5em;

      border-right: 1px solid var(--theme-color);
      background-color: white;

    }

  }

  @media print {
    > aside {
      display: none;
    }
  }

  // remove sidebar nav content
  #sidebar-switch:checked ~ nav {
    display: none;
  }
}


// not what crap katex is adding here, but we just hide it …
.katex-html {
  display: none;
}

// highlight targets are for forward sync when writing text
#highlight:target + * {
  background: yellow;
}

#highlight {
  border-top: 30vh transparent solid;
  margin-top: -30vh;
}
