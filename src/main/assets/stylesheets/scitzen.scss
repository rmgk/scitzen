@import 'lib/normalize.css/normalize';

/*! scitzen.scss */

// define here for media queries, same as css variable below …
// a4 paper has 21cm, subtract 1.5 inch for print margins gives 171.9mm
// but use flexible width for font differences
$main-content-width: 70ch;

:root {
  --theme-color: hsl(0, 50%, 50%);
  --light-theme-color: hsla(0, 50%, 50%, 0.4);
  --color-subdued: hsl(0, 0%, 60%);

  --main-content-width: 70ch;
  --sidebar-max-width: 20em;

  // used for media query based theming
  --background-color: white;
  --text-color: black;
  --figure-box-shadow: 0 0 2px rgba(0, 0, 0, .12), 0 0 4px rgba(0, 0, 0, .24);
}

//@media (prefers-color-scheme: dark) {
//  :root {
//    --background-color: #101010;
//    --text-color: white;
//    --figure-box-shadow: none;
//  }
//}

html {
  background-color: var(--background-color);
  color: var(--text-color);
}

body {
  // that should be 18px for the default of 16px font, but scale with font size …
  font-size: 1.125rem;
  // set line-height to 30 scaled pixels
  line-height: calc(30/18);
}

* {
  // causes words to be broken in the middle, if required for no overflow to occur
  overflow-wrap: break-word;
}

.fullpost main {
  hyphens: auto;
}


/////////////////////////////////////////////////////////////////////////////
// main grid layout
/////////////////////////////////////////////////////////////////////////////


@media screen {
  // grid related things in main
  main {
    // use grid to have text centered, but allow oversized image content
    display: grid;
    // the minmax(0, 1fr) ensures that the margins are never larger than 1fr,
    // but can shrink arbitrarily. Plain 1fr is equal to minmax(auto, 1fr)
    // causing the thing to widen in case the content is large,
    // as could happen with some images.
    // the content has a fixed minimum width to force a scrollbar on the content at some point
    // note that everything breaks if --main-content-width is smaller than the minimum here,
    // which is why the minimum is not min-content
    grid-template-columns: [image-start] minmax(0, 1fr) [content-start] minmax(10em, var(--main-content-width)) [content-end] minmax(0, 1fr) [image-end];
  }
}

main {
  // outer edge to keep everything from hugging the screen
  padding: 1em;
  // allow overscrolling past the end of the content
  margin-bottom: calc(100vh - 3.5em);
}

// in general, we try to ignore section tags in main
main section {
  display: contents;
}

// usually margins should collapse, but because of grid they dont.
// thus we replace margins by grid gaps
@media screen {
  main > *, main section > * {
    margin: 0;
    grid-column: content-start / content-end;
  }
  .fullpost main {
    grid-row-gap: 0.75em;
  }
}

main * {
  // keep all content inside the page
  // this causes per element scrollbars, instead of breaking the full layout
  max-width: 100%;
}


main, main section {
  & > img, & > figure, & > video {
    // oversized figures and images
    grid-column: image-start / image-end;

    // add borders around figures and pure images
    box-shadow: var(--figure-box-shadow);
    //background: rgba(255, 255, 255, 0.8);
    border-radius: 5px;

    // justify instead of margins to center elements in grid
    // unsafe causes the image to stay centered even if things get small,
    // causing the box and shadow of the image to hit the border of the window
    justify-self: unsafe center;
    margin-left: 0;
    margin-right: 0;

    @media print {
      margin-left: auto;
      margin-right: auto;
    }
  }
}



/////////////////////////////////////////////////////////////////////////////
// general styling of elements follow, these should not affect overall layout
/////////////////////////////////////////////////////////////////////////////

a {
  text-decoration: none;
  color: var(--theme-color);

  // add a “push down” effect when hovering links
  &:hover {
    transform: translateX(4px);
    filter: brightness(75%);
  }
}

//math {
//  font-family: "Libertinus Math", sans-serif;
//}

.metadata {
  display: flex;
  // safe causes the metadata to always be visible,
  // even if things become so small that they need to be scrolled
  justify-content: safe center;

  > * {
    margin-right: 0.5em;
  }
}

time, .category {
  @media screen {
    color: var(--color-subdued);
  }
}

time {
  white-space: nowrap;
  // double monospace to override firefox default font size to use same as other fonts
  font-family: monospace, monospace;
  //letter-spacing: -0.0625em;
}



main {
  p, pre, ol, ul {
    text-align: justify;
    // restrict max width also when nested inside something else
    max-width: var(--main-content-width);
    font-family: inherit;
  }
}

main .marginnote {
  grid-column: content-end;
  margin-left: 2em;
  overflow: hidden;
}

main figure > pre {
  // undo max width of code pres when top level in figure
  // to profit from oversize figures
  max-width: 100%;
}

h1, h2, h3, h4, h5, h6 {
    line-height: 1.1;
    font-weight: 700;
    margin-top: 2rem;
    margin-bottom: 1rem;
}

h1 { font-size: 2.35em }
h2 { font-size: 2.00em }
h3 { font-size: 1.75em }
h4 { font-size: 1.5em }
h5 { font-size: 1.25em }
h6 { font-size: 1em }


h1, h2, h3, h4, h5, h6 {
  text-align: center;
}

main > *:first-child {
  margin-top: 0;
}

pre {
  white-space: pre-line;
}

pre > code {
  white-space: pre-wrap;
}

.rule {
  font-variant: small-caps;
}

// quote links and code in paragraphs to clarify their borders
.fullpost main {
  p, li {
    & > a, & > code {
      &:before {
        // ⸢ ⸣ ⸤ ⸥
        content: "⸢";
      }

      &:after {
        content: "⸥";
      }
    }
  }
}

li > p:only-child {
  margin: 0;
}

img {
  // why is this not the default?
  image-orientation: from-image;

  display: block;
  height: auto;
  max-height: 40em;
  margin: auto;
  max-width: 100%;
}


figure, blockquote {
  border: 1px solid var(--color-subdued);
  padding: calc(1em - 1px);
}

figure, blockquote, dd {
  & > :first-child {
    margin-top: 0;
  }

  // center elements inside figure
  & > * {
    margin-left: auto;
    margin-right: auto;
  }

  & > :last-child {
    margin-bottom: 0;
  }
}

cite::before {
  content: "– ";
}

ins {
  text-decoration: none;
  color: darkgreen;
}

del {
  color: darkred;
}



/////////////////////////////////////////////////////////////////////////////
// index page styling
/////////////////////////////////////////////////////////////////////////////

a > article {
  display: flex;

  @media screen and (max-width: $main-content-width) {
    flex-direction: column;
  }

  @media screen and (min-width: $main-content-width) {
    & > .category {
      text-align: right;
    }
  }

  // space between the items of the article
  & > * {
    margin-right: 0.5em;
  }

  // make the title get most of the space,
  // to cause the tags to be right aligned
  & > .title {
    flex: 1;
  }
}


/////////////////////////////////////////////////////////////////////////////
// Sidebar design
/////////////////////////////////////////////////////////////////////////////

// body has an optional aside and a main
// if the aside exists, it is pinned on the full height,
// unless a button is pressed to hide it
body {
  @media screen {
    display: flex;
    align-items: stretch;
  }

  & > main {
    flex: 1 1 var(--main-content-width);
  }

  & > aside {
    // the sidebar never shrinks below its minimum content,
    // and tries to grow as soon as possible
    flex: 0 100 max-content;
    // max width, because sidebar with very long header names does not look great
    max-width: var(--sidebar-max-width);

    // input label pair to allow hiding the sidebar content (nav)
    & > input {
      display: none;
    }

    & > label {
      // the label is marked as hidden in the HTML,
      // because it makes no sense to show it if the stylesheet is not present
      // we use this high specificity selector to override the hidden attribute
      &[hidden] {
        display: initial;
      }

      position: fixed;
      top: 0;
      cursor: pointer;
      width: 1.5em;
      height: 1.5em;
      display: block;
      padding: 0.5em;
      z-index: 1;

      svg {
        width: 100%;
        height: 100%;
      }
    }

    nav {
      // sticky at top 0 (original position of the element) essentially causes the
      // element to be fixed in place BUT it keeps occupying space in the layout
      position: sticky;
      top: 0;

      // show scrollbar
      overflow-y: scroll;
      scrollbar-width: thin;
      scrollbar-color: var(--light-theme-color) hsla(0, 0%, 0%, 0);

      // box sizing together with height makes it occupy the full height pixel perfect
      box-sizing: border-box;
      height: 100vh;

      // top margin to not collide with the label as much
      padding: 2.5em 0.5em 0 0.5em;

      border-right: 1px solid var(--theme-color);

      ol {
        list-style: disc;
        margin: 0;
        margin-left: 1em;
        padding: 0;
      }

    }

  }

  @media print {
    > aside {
      display: none;
    }
  }

  // remove sidebar nav content
  #sidebar-switch:checked ~ nav {
    display: none;
  }
}

/////////////////////////////////////////////////////////////////////////////
// external and technical stuff
/////////////////////////////////////////////////////////////////////////////

// not sure what kind of crap katex is adding here, but we just hide it …
.katex-html {
  display: none;
}

// highlight targets are for forward sync when writing text
#highlight:target + * {
  background: yellow;
}

#highlight {
  border-top: 30vh transparent solid;
  margin-top: -30vh;
}
