= Changelog

== v1.2
date = 2023-11-15

â€¢ Use positive class names for customizable things that differ from the HTML default:
	the logic before was, that the default should not add a class, to reduce the HTML size a bit. However, thinking about it, all the negations seem like a terrible idea (:not(no-justify), really? wtf?). So instead letâ€™s make configurable style choices add class names when they differ from the HTML default display.

	I also changed the default to be hard wraps. I think this is in big parts due to me changing my writing style to just write paragraphs in a single line. But more than that, I feel that for less formal texts, a newline within a paragraph is actually a perfectly fine style element and should be preserved as such. For more formal writing, such as with papers, is also less annoying to have to change a setting. I think this also has become the default for GitHub Markdown (at least in comments) for exactly the same reasoning â€“ it just makes more sense in comments and such.

Sometime in the last two years I realized that it is much more practical to just have changelog files, instead of writing the changelog to the tag. In particular this makes it much easier to just note down things as I change them. Then again, Scitzen never had meaningful versions anyway, so documenting changes is really just more to rethink design decisions, which is also why the above note is the only one that made the cut. (And also because I donâ€™t remember most of the time I change anything significant.)

I guess other things include:

â€¢ prism based syntax highlighting
â€¢ tons of changes to how native image works
	â€¢ the overall trend seems to be more stability, in particular since itâ€™s kinda integrated with JDK 21 (releases) now
	â€¢ but dang I have to spend a lot of effort into making it compile every time again
	â€¢ on the other hand, non native image performance has also improved and is certainly usable
â€¢ css has become featureful enough that I no longer feel the need for sass \o/
â€¢ I replaced the option parsing library with another one
	â€¢ [spoiler] â€¦ and then gave up and wrote my own
â€¢ I wrote my own parser combinator library to replace fastparse (after I ported enough of fastparse to scala 3 to make it work for my usecase)
â€¢ chrome got enough mathml support, that just including mathml actually works there now \o/ (I did nothing to that end)
â€¢ some bib management and download capabilities
â€¢ conversions became much more systematic
â€¢ I wrote my own html templating library (see the pattern yet?)
â€¢ tons of other things changed ðŸ˜œ


Dependencies are weird now â€“ the only remaining Scala dependencies are jsoniter-scala (which is just wonderful) and sourcecode (which is tiny, but also likely to be replaced by just plain Scala 3 as soon as I care). But then, there are huge mixed Java/JS dependencies like citeproc-java, and the whole Graal/Truffle stack to run prism, and katex. So actually Scitzen does have very little dependencies, but Graal/Truffle is one heck of a giant one.






== v1.1
date = 2021-12-07

Note that there should be a :link{GH action building binaries; https://github.com/rmgk/scitzen/actions/workflows/native.yml} for each commit, and versioned releases have no better guarantees than any other random build.

â€¢ Changes include:
	â€¢ always use :link{tectonic; https://tectonic-typesetting.github.io/} to build latex (used latexmk & xetex before)
	â€¢ ported to scala 3 (but still use scala 2 fastparse based parsers for speed)
	â€¢ lots of small bits how individual macros are handled and with the HTML formatting
	â€¢ nothing major with regards to syntax (maybe we can parse nested macros now, but maybe we could also do it before?)

Btw. if you ever create a Scitzen project I highly recommend installing :link{coursier; https://get-coursier.io/} and use an incantation like the following to create a self-contained executable bootstrap jar file called `build`, which is ~50 kB in size and only requires a JVM to be executed and can then be used to compile your project. While this JVM based runner is much slower than the compiled binary, you can store it together with your project, and if you ever find you need to compile the project again in the future, it should still work (without you having to figure out what scitzen version to use):

Incantation where you should replace the commit hash with any other commit hash (maybe slow if thatâ€™s the first time :link{jitpack; https://jitpack.io/} build the commit for you):
	cs bootstrap --repository jitpack com.github.rmgk:scitzen:2bb552ce24e30ca74c3e5daec24d766f6c78652f --main-class scitzen.cli.Scitzen -f -o build

This also feels more like a blog post than a changelog, but â€¦ why not ðŸ¤·.


== v1.0
date = 2020-11-21

First versioned release.
Includes the following features.

â€¢ Syntax has been quite stable for a while.
â€¢ HTML and LaTeX (PDF) output.
â€¢ Automatically converts used images between PDF, SVG, and PNG depending on the support of the output format.
â€¢ Built in CSS Stylesheet for list of articles and the articles themselves (non-configurable).
â€¢ Flexible LaTeX templates.
â€¢ Inline GraphViz and Mermaid conversions.
â€¢ KaTeX for LaTeX math in HTML.

Caveats:

â€¢ Many conversions require external tools.
â€¢ External tools probably break for slightly different systems.
â€¢ Only Linux has ever been tested.
â€¢ Syntax still subject to arbitrary changes.
â€¢ No documentation ðŸ˜‚.
