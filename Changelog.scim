== v.next

â€¢ Use positive class names for customizable things that differ from the HTML default:
	the logic before was, that the default should not add a class, to reduce the HTML size a bit. However, thinking about it, all the negations seem like a terrible idea (:not(no-justify), really? wtf?). So instead letâ€™s make configurable style choices add class names when they differ from the HTML default display.

	I also changed the default to be hard wraps. I think this is in big parts due to me changing my writing style to just write paragraphs in a single line. But more than that, I feel that for less formal texts, a newline within a paragraph is actually a perfectly fine style element and should be preserved as such. For more formal writing, such as with papers, is also less annoying to have to change a setting. I think this also has become the default for GitHub Markdown (at least in comments) for exactly the same reasoning â€“ it just makes more sense in comments and such.

== v1.1
2021-12-07

Note that there should be a :link{GH action building binaries; https://github.com/rmgk/scitzen/actions/workflows/native.yml} for each commit, and versioned releases have no better guarantees than any other random build.

â€¢ Changes include:
	â€¢ always use :link{tectonic; https://tectonic-typesetting.github.io/} to build latex (used latexmk & xetex before)
	â€¢ ported to scala 3 (but still use scala 2 fastparse based parsers for speed)
	â€¢ lots of small bits how individual macros are handled and with the HTML formatting
	â€¢ nothing major with regards to syntax (maybe we can parse nested macros now, but maybe we could also do it before?)

Btw. if you ever create a Scitzen project I highly recommend installing :link{coursier; https://get-coursier.io/} and use an incantation like the following to create a self-contained executable bootstrap jar file called `build`, which is ~50 kB in size and only requires a JVM to be executed and can then be used to compile your project. While this JVM based runner is much slower than the compiled binary, you can store it together with your project, and if you ever find you need to compile the project again in the future, it should still work (without you having to figure out what scitzen version to use):

Incantation where you should replace the commit hash with any other commit hash (maybe slow if thatâ€™s the first time :link{jitpack; https://jitpack.io/} build the commit for you):
	cs bootstrap --repository jitpack com.github.rmgk:scitzen:2bb552ce24e30ca74c3e5daec24d766f6c78652f --main-class scitzen.cli.Scitzen -f -o build

This also feels more like a blog post than a changelog, but â€¦ why not ðŸ¤·.


== v1.0
date = 2020-11-21

First versioned release.
Includes the following features.

â€¢ Syntax has been quite stable for a while.
â€¢ HTML and LaTeX (PDF) output.
â€¢ Automatically converts used images between PDF, SVG, and PNG depending on the support of the output format.
â€¢ Built in CSS Stylesheet for list of articles and the articles themselves (non-configurable).
â€¢ Flexible LaTeX templates.
â€¢ Inline GraphViz and Mermaid conversions.
â€¢ KaTeX for LaTeX math in HTML.

Caveats:

â€¢ Many conversions require external tools.
â€¢ External tools probably break for slightly different systems.
â€¢ Only Linux has ever been tested.
â€¢ Syntax still subject to arbitrary changes.
â€¢ No documentation ðŸ˜‚.
